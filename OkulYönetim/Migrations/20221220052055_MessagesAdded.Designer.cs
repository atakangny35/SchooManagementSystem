// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OkulYönetim.Entity.EntityFramework.Context;

#nullable disable

namespace OkulYönetim.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221220052055_MessagesAdded")]
    partial class MessagesAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("OkulYönetim.Entity.concrete.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("OkulYönetim.Entity.concrete.Ders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DersAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dersler");
                });

            modelBuilder.Entity("OkulYönetim.Entity.concrete.Messages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsReaded")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSended")
                        .HasColumnType("bit");

                    b.Property<string>("QueueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiverUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SendedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<int?>("SenderUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SenderUserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("OkulYönetim.Entity.concrete.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AddedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DersID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("NoteValue")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DersID");

                    b.HasIndex("UserId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("OkulYönetim.Entity.concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Branch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            Branch = "Admin",
                            Email = "adminuser123@gmail.com",
                            Name = "AmidnUser",
                            PasswordHash = new byte[] { 168, 206, 32, 134, 31, 79, 15, 101, 221, 17, 201, 24, 247, 144, 9, 106, 42, 211, 245, 17, 25, 233, 147, 112, 42, 132, 126, 17, 197, 134, 183, 179 },
                            PasswordSalt = new byte[] { 26, 123, 201, 224, 218, 106, 229, 129, 24, 94, 22, 42, 223, 68, 144, 77, 250, 121, 189, 229, 120, 154, 165, 99, 144, 117, 184, 184, 163, 4, 250, 98, 174, 219, 43, 113, 98, 194, 130, 224, 239, 54, 159, 120, 242, 151, 95, 117, 129, 116, 146, 26, 84, 209, 255, 219, 89, 153, 101, 239, 51, 90, 166, 127 },
                            Surname = "AmidnUser",
                            UserRoleId = 4
                        });
                });

            modelBuilder.Entity("OkulYönetim.Entity.concrete.UserClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.ToTable("UserClasses");
                });

            modelBuilder.Entity("OkulYönetim.Entity.concrete.UserDers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Dersid")
                        .HasColumnType("int");

                    b.Property<int>("Userid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Dersid");

                    b.HasIndex("Userid");

                    b.ToTable("UserDers");
                });

            modelBuilder.Entity("OkulYönetim.Entity.concrete.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            RoleName = "Admin"
                        });
                });

            modelBuilder.Entity("OkulYönetim.Entity.concrete.Messages", b =>
                {
                    b.HasOne("OkulYönetim.Entity.concrete.User", "ReceiverUser")
                        .WithMany()
                        .HasForeignKey("ReceiverUserId");

                    b.HasOne("OkulYönetim.Entity.concrete.User", "SenderUser")
                        .WithMany()
                        .HasForeignKey("SenderUserId");

                    b.Navigation("ReceiverUser");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("OkulYönetim.Entity.concrete.Note", b =>
                {
                    b.HasOne("OkulYönetim.Entity.concrete.Ders", "Dersler")
                        .WithMany()
                        .HasForeignKey("DersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OkulYönetim.Entity.concrete.User", "Users")
                        .WithMany("Notes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dersler");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("OkulYönetim.Entity.concrete.User", b =>
                {
                    b.HasOne("OkulYönetim.Entity.concrete.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("OkulYönetim.Entity.concrete.UserClass", b =>
                {
                    b.HasOne("OkulYönetim.Entity.concrete.Class", "Classes")
                        .WithMany("userClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OkulYönetim.Entity.concrete.User", "Users")
                        .WithMany("userClasses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classes");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("OkulYönetim.Entity.concrete.UserDers", b =>
                {
                    b.HasOne("OkulYönetim.Entity.concrete.Ders", "Dersler")
                        .WithMany("userDers")
                        .HasForeignKey("Dersid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OkulYönetim.Entity.concrete.User", "Users")
                        .WithMany("userDers")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dersler");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("OkulYönetim.Entity.concrete.Class", b =>
                {
                    b.Navigation("userClasses");
                });

            modelBuilder.Entity("OkulYönetim.Entity.concrete.Ders", b =>
                {
                    b.Navigation("userDers");
                });

            modelBuilder.Entity("OkulYönetim.Entity.concrete.User", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("userClasses");

                    b.Navigation("userDers");
                });

            modelBuilder.Entity("OkulYönetim.Entity.concrete.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
